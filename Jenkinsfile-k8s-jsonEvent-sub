def event = ''
def myCoolKey = ''
pipeline {
  agent none
  triggers {
        eventTrigger jmespathQuery("event=='helloWorld'")
    }
    stages {
        stage('Example') {
            agent {
                kubernetes {
                    label 'sub'
                    yaml """
apiVersion: v1
kind: Pod
spec:
  nodeSelector:
    partition: regular-agents
  tolerations:
    - key: partition
      operator: Equal
      value: regular-agents
      effect: NoSchedule
"""
        }
  }            when {
                triggeredBy "EventTriggerCause"
                beforeAgent true
            }
            steps {
                echo "****************************************"
                echo "The class type that triggered this run: " + currentBuild?.getBuildCauses()[0]?._class?.toString()
                echo "****************************************"

                echo "****************************************"
                echo "The full message received:"
                echo groovy.json.JsonOutput.prettyPrint(currentBuild?.getBuildCauses()?.toString())
                echo "****************************************"

                echo "****************************************"
                echo "Just the event part of the full message received (note the new source value added on from the JSON from publishEvent):"
                echo groovy.json.JsonOutput.prettyPrint(currentBuild?.getBuildCauses()[0]?.event?.toString())
                echo "****************************************"

                echo "****************************************"
                echo "The value of event from the publishEvent JSON: " + currentBuild?.getBuildCauses()[0]?.event?.event?.toString()
                echo "****************************************"

                script {
                    event = currentBuild.getBuildCauses()[0]?.event?.event?.toString()
                    firstName = currentBuild.getBuildCauses()[0]?.event?.firstName?.toString()
                    lastName = currentBuild.getBuildCauses()[0]?.event?.lastName?.toString()
                }

                echo "****************************************"
                echo "extracted value for event: " + event
                echo "extracted value for firstName: " + firstName
                echo "extracted value for lastName: " + lastName
                echo "****************************************"
            }
        }
    }
}
